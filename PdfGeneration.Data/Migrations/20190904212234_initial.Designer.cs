// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PdfGeneration.Data;

namespace PdfGeneration.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190904212234_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PdfGeneration.Data.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Allergies");

                    b.Property<string>("AttachedSection");

                    b.Property<string>("Basd");

                    b.Property<string>("Bdi");

                    b.Property<string>("BloodType");

                    b.Property<string>("Branch");

                    b.Property<string>("CityOfBirth");

                    b.Property<DateTime?>("Dob");

                    b.Property<string>("Dor");

                    b.Property<string>("DutyPhone");

                    b.Property<string>("Edipi");

                    b.Property<string>("Ets");

                    b.Property<string>("EyeColor");

                    b.Property<string>("FingerPrints");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("HairColor");

                    b.Property<string>("Height");

                    b.Property<string>("HomePhone");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("MosRate");

                    b.Property<string>("MothersMaidenName");

                    b.Property<string>("Mpc");

                    b.Property<string>("Nickname");

                    b.Property<string>("OtherPhone");

                    b.Property<string>("Pebd");

                    b.Property<string>("PicFile");

                    b.Property<string>("PicName");

                    b.Property<string>("PicPath");

                    b.Property<string>("PicUrl");

                    b.Property<string>("Race");

                    b.Property<string>("Rank");

                    b.Property<string>("Religion");

                    b.Property<string>("Remarks");

                    b.Property<string>("SectionAssigned");

                    b.Property<string>("Ssn");

                    b.Property<string>("StateOfBirth");

                    b.Property<string>("Suffix");

                    b.Property<string>("Unit");

                    b.Property<string>("Weight");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("PdfGeneration.Data.Entities.PersonAssociate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssociateId");

                    b.Property<int>("PersonId");

                    b.HasKey("Id");

                    b.HasIndex("AssociateId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAssociate");
                });

            modelBuilder.Entity("PdfGeneration.Data.Entities.Upload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("File");

                    b.Property<string>("FileType");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<long>("Size");

                    b.Property<DateTime>("UploadDate");

                    b.Property<string>("Url");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Upload");
                });

            modelBuilder.Entity("PdfGeneration.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<Guid>("Guid");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<string>("SocketName");

                    b.Property<string>("Theme");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PdfGeneration.Data.Entities.PersonAssociate", b =>
                {
                    b.HasOne("PdfGeneration.Data.Entities.Person", "Associate")
                        .WithMany("People")
                        .HasForeignKey("AssociateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PdfGeneration.Data.Entities.Person", "Person")
                        .WithMany("Associates")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PdfGeneration.Data.Entities.Upload", b =>
                {
                    b.HasOne("PdfGeneration.Data.Entities.User", "User")
                        .WithMany("Uploads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
